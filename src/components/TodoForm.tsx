import "./TodoForm.css"; // Importerar css-filen f√∂r TodoForm
import { useState } from "react"; // Importerar useState fr√•n react
import * as Yup from "yup"; // r Yup fr√•n biblioteket yup
import { createTodo } from "../services/todoServices"; // Importerar funktionen f√∂r att skapa en ny todo
import { TodoFormProps, FormData, ErrorsData } from "../types/interfaces"; // Importerar interface f√∂r props, formul√§rdata och felmeddelanden

// Komponent f√∂r att skapa en ny todo, tar emot addTodo som prop (av typen TodoFormProps)
const TodoForm = ({ addTodo }: TodoFormProps) => {

    // Valideringsschema med Yup
    const validationSchema = Yup.object().shape({
        title: Yup.string()
            .min(3, "Titeln m√•ste vara minst 3 tecken l√•ng")
            .required("Du m√•ste ange en titel"),
        description: Yup.string()
            .max(200, "Beskrivningen f√•r max vara 200 tecken"),
        status: Yup.string()
            .oneOf(["Ej p√•b√∂rjad", "P√•g√•ende", "Avklarad"], "Ogiltig status") // Till√•tna v√§rden f√∂r status
    });

    // State f√∂r formul√§rdata
    const [formData, setFormData] = useState<FormData>({
        title: "",
        description: "",
        status: "Ej p√•b√∂rjad",
    });

    // State f√∂r felmeddelanden
    const [errors, setErrors] = useState<ErrorsData>({});

    // Funktion som anropas n√§r formul√§ret skickas
    const submitForm = async (event: any) => {
        event.preventDefault(); // F√∂rhindra att sidan laddas om
        try {
            await validationSchema.validate(formData, { abortEarly: false }); // Validera hela formul√§ret
            const newTodo = await createTodo(formData); // Skapa en ny todo med datan fr√•n formul√§ret
            addTodo(newTodo); // L√§gg till den nya todon i listan med todos (state)
            setFormData({ title: "", description: "", status: "Ej p√•b√∂rjad" }); // Nollst√§ll formul√§ret (uppdatera state)
            setErrors({}); // Rensa felmeddelanden
        } catch (error) {
            // Skapa ett tomt objekt f√∂r felmeddelanden av typen ErrorsData
            const validationErrors: ErrorsData = {};
            // Kontrollera om errors √§r av typen Yup.ValidationError
            if (error instanceof Yup.ValidationError) {
                // Loopa igenom alla valideringsfel och skapa felmeddelanden
                error.inner.forEach((err) => {
                    const prop = err.path as keyof ErrorsData; // Konvertera error.path till en nyckel av typen ErrorsData
                    validationErrors[prop] = err.message; // S√§tt felmeddelandet f√∂r f√§ltet
                });
                // Uppdatera state med felmeddelanden
                setErrors(validationErrors);
            } else {
                console.error("Fel vid skapande av todo:", error); // Logga eventuella fel
                setErrors({ title: "N√•got gick fel vid skapandet av todo" }); // Uppdatera state med felmeddelande
            }
        }
    };

    return (
        <div className="form-container">
            <h2>Skapa ny uppgift</h2>
            {/* Formul√§r f√∂r att skapa en ny todo, anropa submitForm vid submit */}
            <form className="todo-form" onSubmit={submitForm}>
                <div>
                    <label htmlFor="title">Titel</label>
                    {/* Input-f√§lt f√∂r titel, uppdaterar state vid √§ndring */}
                    <input type="text" id="title" placeholder="Ange en titel"value={formData.title} onChange={(event) => setFormData({ ...formData, title: event.target.value })} />
                    {/* Visa felmeddelande f√∂r titel om det finns n√•got */}
                    {errors.title && <span className="error-message">{errors.title}</span>}
                </div>

                <div>
                    <label htmlFor="description">Beskrivning</label>
                    {/* Textarea f√∂r beskrivning, uppdaterar state vid √§ndring */}
                    <textarea id="description" placeholder="Beskriv din uppgift..."rows={5} value={formData.description} onChange={(event) => setFormData({ ...formData, description: event.target.value })} />
                    {/* Visa felmeddelande f√∂r beskrivning om det finns n√•got */}
                    {errors.description && <span className="error-message">{errors.description}</span>}
                </div>

                <div>
                    <label htmlFor="status">Status</label>
                    {/* Select f√∂r status, uppdaterar state vid √§ndring med vald status */}
                    <select id="status" value={formData.status} onChange={(event) => setFormData({ ...formData, status: event.target.value as "Ej p√•b√∂rjad" | "P√•g√•ende" | "Avklarad" })}>
                        <option value="Ej p√•b√∂rjad">‚≠ï Ej p√•b√∂rjad</option>
                        <option value="P√•g√•ende">‚è≥ P√•g√•ende</option>
                        <option value="Avklarad">‚úÖ Avklarad</option>
                    </select>
                    {/* Visa felmeddelande f√∂r status om det finns n√•got */}
                    {errors.status && <span className="error-message">{errors.status}</span>}
                </div>
                {/* Knapp f√∂r att skicka formul√§ret */}
                <button type="submit">üìå Spara uppgift</button>
            </form>
        </div>
    );
};

export default TodoForm;
